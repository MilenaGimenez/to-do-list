{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["Form","setTodos","todos","inputText","setInputText","setStatus","onChange","e","target","value","type","className","disabled","trim","length","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","tarea","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","localStorage","getItem","setItem","JSON","stringify","todoLocal","parse","getLocalTodos","filteredHandler","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16d19496.chunk.js","sourcesContent":["import {useState} from 'react';\r\n\r\nconst Form = ({setTodos, todos, inputText, setInputText, setStatus}) => {\r\n    const submitTodoHandler = e => {\r\n        e.preventDefault();\r\n        //actualiza la variable que era un arr vacio haciendo una copia del arreglo y aÃ±ade un objeto nuevo:\r\n        //cada que se hace click, se guarda el input en un objeto\r\n        setTodos([...todos, {\r\n            text: inputText,\r\n            completed: false,\r\n            id: Math.random() * 10000    \r\n        }])\r\n\r\n        //para que cuando acabe estes vacio\r\n        setInputText('')\r\n    }\r\n\r\n    const inputTextHandler = e => {\r\n        setInputText(e.target.value)\r\n    }\r\n\r\n    const statusHandler = e => {\r\n        setStatus(e.target.value)\r\n    }\r\n   \r\n    return(\r\n        <form>\r\n            <input \r\n                onChange={inputTextHandler}\r\n                type=\"text\" \r\n                value={inputText}\r\n                className=\"todo-input\"\r\n            />\r\n            <button \r\n                disabled={inputText.trim().length\r\n                === 0}\r\n                onClick={submitTodoHandler}\r\n                className=\"todo-button\"\r\n                type=\"submit\"\r\n            >\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select \r\n                    name=\"todos\"\r\n                    className=\"filter-todo\"\r\n                    onChange={statusHandler}\r\n                >\r\n                    <option value=\"all\">Todas</option>\r\n                    <option value=\"completed\">Completas</option>\r\n                    <option value=\"uncomplete\">Incompletas</option>\r\n                </select>\r\n            </div>\r\n        </form>        \r\n    );\r\n};\r\n\r\nexport default Form;","const Todo = ({todo, setTodos, todos}) => {\r\n    const deleteHandler = () => {\r\n        setTodos(todos.filter(tarea => tarea.id !== todo.id))\r\n    }\r\n\r\n    const completeHandler = e => {\r\n        setTodos(todos.map(item => {\r\n            if(todo.id === item.id){\r\n                return {\r\n                    ...item, completed: !item.completed //hacemos una copia de ese item, y le metemos lo otro dentro. pone en falso o verdadero el item\r\n                }\r\n            }\r\n            return item; //map necesita un retorno\r\n        }))//setTodos es la funcion que actualiza el estado\r\n    }\r\n\r\n    return (\r\n            <div className=\"todo\">\r\n                <li className={`todo-item ${todo.completed && \"completed\"}`}>{todo.text}</li>\r\n                <button onClick={completeHandler} className={`complete-btn ${todo.completed && \"boton-rojo\"}`}>\r\n                    <i className=\"fas fa-check\"></i>\r\n                </button>\r\n                <button onClick={deleteHandler} className=\"trash-btn\">\r\n                    <i className=\"fas fa-trash\"></i>\r\n                </button>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Todo;\r\n","import Todo from './Todo';\r\n\r\nconst TodoList = ({todos, setTodos, filteredTodos}) => {\r\n    return(\r\n        <div>\r\n            <div className=\"todo-container\">\r\n                <ul className=\"todo-list\">\r\n                    {filteredTodos.map(todo => (\r\n                        <Todo \r\n                            todos={todos}\r\n                            todo={todo}\r\n                            setTodos={setTodos}\r\n                            key={todo.id}\r\n                        />\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import {useState, useEffect} from 'react';\nimport './App.css';\n\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\n\nfunction App() {\n  \n  //Estos son estados\n  const [inputText, setInputText] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  const getLocalTodos = () => {\n    if(localStorage.getItem('todos') === null){//para prevenir errores\n      localStorage.setItem('todos', JSON.stringify(todos))\n    } else {\n      const todoLocal = JSON.parse(localStorage.getItem('todos'))\n      setTodos(todoLocal)\n    }\n  }\n\n  useEffect(() => { \n    getLocalTodos();\n  }, []);\n\n  useEffect(() => {\n    const filteredHandler = () => {\n        switch(status){\n          case 'completed' : \n          setFilteredTodos(todos.filter(tarea => tarea.completed === true))\n          break;\n          case 'uncomplete' : \n          setFilteredTodos(todos.filter(tarea => tarea.completed === false))\n          break;\n          default:\n            setFilteredTodos(todos);\n          }\n        }\n        //gurdar en local storage\n        //es buena practica poner este tipo de funciones en useeffect para que no se esten ejecuntando solas\n        const saveLocalTodos = () => {\n          localStorage.setItem('todos', JSON.stringify(todos))\n        };\n\n        filteredHandler()    \n        saveLocalTodos()\n  }, [todos, status]);//que reaccione cuando el usuario cambie o elimine, o cuando cambie el estado\n\n\n \n\n  return (\n    <div>\n      <header>\n        <h1>Todo List</h1>\n      </header>\n      <Form \n        todos={todos}\n        setTodos={setTodos}\n        inputText={inputText}\n        setInputText={setInputText}\n        setStatus={setStatus}\n      />\n      <TodoList \n        todos={todos}\n        setTodos={setTodos}\n        filteredTodos={filteredTodos}\n      />      \n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}